// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum RefundType {
  POINT
  BANK
}

model User {
  id               Int                @id @default(autoincrement())
  role             Role               @default(USER)
  firstName        String?            @map("first_name")
  lastName         String?            @map("last_name")
  email            String             @unique
  phone            String?
  password         String
  refund           RefundType?
  point            Int                @default(0)
  shipping_Address Shipping_Address[]
  product          Product[]
  favorite         Favorite[]
  cart             Cart?
  order            Order[]
}

model Shipping_Address {
  id            Int     @id @default(autoincrement())
  firstName     String  @map("first_name")
  lastName      String  @map("last_name")
  phone         String
  country       String
  address       String
  postalCode    String  @map("postal_code")
  province      String
  district      String
  subDistrict   String  @map("sub_district")
  isMainAddress Boolean @map("is_main_address")
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId        Int
}

model Favorite {
  id               Int                @id @default(autoincrement())
  name             String
  user             User               @relation(fields: [userId], references: [id])
  userId           Int
  favoriteProducts Favorite_Product[]
}

model Favorite_Product {
  id         Int      @id @default(autoincrement())
  favorite   Favorite @relation(fields: [favoriteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  favoriteId Int      @map("favorite_id")
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId  Int      @map("product_id")
}

model Cart {
  id                  Int            @id @default(autoincrement())
  totalBeforeDiscount Int            @default(0) @map("total_before_discount")
  discount            Int            @default(0)
  deliveryFee         Int            @default(0) @map("delivery_fee")
  total               Int            @default(0)
  user                User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId              Int            @unique @map("user_id")
  cart_products       Cart_product[]
}

model Cart_product {
  id        Int     @id @default(autoincrement())
  quantity  Int     @default(1)
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cartId    Int     @map("cart_id")
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId Int     @map("product_id")
}

model Order {
  id                  Int          @id @default(autoincrement())
  totalBeforeDiscount Int          @default(0) @map("total_before_discount")
  discount            Int          @default(0)
  total               Int          @default(0)
  date                DateTime     @default(now())
  deliveryFee         Int          @default(0) @map("delivery_fee")
  user                User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId              Int          @map("user_id")
  order_item          Order_item[]
  status              Status[]
}

model Order_item {
  id        Int     @id @default(autoincrement())
  quantity  Int     @default(1)
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId   Int     @map("order_id")
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId Int     @map("product_id")
}

enum OrderStatus {
  UNPAID
  PREPARED
  SHIPPED
  DELIVERED
  CANCELLED
}

model Status {
  id      Int         @id @default(autoincrement())
  status  OrderStatus @default(UNPAID)
  date    DateTime    @default(now())
  order   Order       @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId Int         @map("order_id")
}

model Product {
  id                Int                 @id @default(autoincrement())
  stock             Int                 @default(0)
  version           String
  name              String
  price             Int
  detail            String
  scale             String
  weight            Decimal
  material          String
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId            Int                 @map("user_id")
  favorite_Product  Favorite_Product[]
  cart_product      Cart_product[]
  order_item        Order_item[]
  status_product    Prodcut_status      @default(NEW)
  product_img       Product_img[]
  brand             Brand               @relation(fields: [brandId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  brandId           Int
  collection        Collection          @relation(fields: [collectionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  collectionId      Int
  series            Series              @relation(fields: [seriesId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  seriesId          Int
  product_Promotion Product_Promotion[]
  Status_product    Status_product[]
}

enum Prodcut_status {
  NEW
  PREORDER
  LIMITED
  SOLDOUT
  OUTSTOCK
  LOWSTOCK
}

model Status_product {
  id        Int            @id @default(autoincrement())
  status    Prodcut_status @default(NEW)
  product   Product        @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId Int            @map("product_id")
}

model Product_Promotion {
  id          Int       @id @default(autoincrement())
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId   Int       @map("product_id")
  promotion   Promotion @relation(fields: [promotionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  promotionId Int       @map("promotion_id")
}

model Promotion {
  id                 Int                 @id @default(autoincrement())
  name               String
  bannerUrl          String?             @map("banner_url")
  discount           Int?
  point              Int?
  product_Promotions Product_Promotion[]
}

model Product_img {
  id        Int     @id @default(autoincrement())
  url       String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId Int     @map("product_id")
}

model Brand {
  id       Int       @id @default(autoincrement())
  name     String
  count    Int       @default(0)
  products Product[]
}

model Collection {
  id       Int       @id @default(autoincrement())
  name     String
  count    Int       @default(0)
  products Product[]
}

model Series {
  id       Int       @id @default(autoincrement())
  name     String
  count    Int       @default(0)
  products Product[]
}
